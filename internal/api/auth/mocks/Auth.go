// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AuthApi is an autogenerated mock type for the Auth type
type AuthApi struct {
	mock.Mock
}

// IsAdmin provides a mock function with given fields: ctx, userID
func (_m *AuthApi) IsAdmin(ctx context.Context, userID int64) (bool, error) {
	ret := _m.Called(ctx, userID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (bool, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, email, password, appID
func (_m *AuthApi) Login(ctx context.Context, email string, password string, appID int32) (string, error) {
	ret := _m.Called(ctx, email, password, appID)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int32) (string, error)); ok {
		return rf(ctx, email, password, appID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int32) string); ok {
		r0 = rf(ctx, email, password, appID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int32) error); ok {
		r1 = rf(ctx, email, password, appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterNewUser provides a mock function with given fields: ctx, email, password
func (_m *AuthApi) RegisterNewUser(ctx context.Context, email string, password string) (int64, error) {
	ret := _m.Called(ctx, email, password)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (int64, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthApi interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthApi creates a new instance of AuthApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthApi(t mockConstructorTestingTNewAuthApi) *AuthApi {
	mock := &AuthApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
